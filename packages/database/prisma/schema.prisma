generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime  @default(now()) @map(name: "created_at")
  updatedAt      DateTime  @default(now()) @map(name: "updated_at")
  password       String?
  institution_id String?   @map(name: "institution_id")

  isApproved Boolean   @default(false) @map(name: "is_approved")
  approvedBy String?   @map(name: "approved_by")
  approvedAt DateTime? @map(name: "approved_at")

  roles String[] @default(["USER"])

  accounts    Account[]
  sessions    Session[]
  Post        Post[]
  GuildMember GuildMember[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String

  author User @relation(fields: [authorId], references: [id])

  @@map(name: "posts")
}

model Guild {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  members   GuildMember[]
  GuildRole GuildRole[]
  Channel   Channel[]

  @@map(name: "guilds")
}

model GuildMember {
  id        String   @id @default(cuid())
  userId    String
  guildId   String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user  User  @relation(fields: [userId], references: [id])
  guild Guild @relation(fields: [guildId], references: [id])

  @@map(name: "guild_members")
}

model GuildRole {
  id        String   @id @default(cuid())
  name      String
  guildId   String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  guild Guild @relation(fields: [guildId], references: [id])

  @@map(name: "guild_roles")
}

model Channel {
  id        String   @id @default(cuid())
  name      String
  guildId   String
  disabled Boolean @default(false)
  flavour String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  guild          Guild            @relation(fields: [guildId], references: [id])
  ChannelMessage ChannelMessage[]

  @@map(name: "channels")
}

model ChannelMessage {
  id        String   @id @default(cuid())
  content   String
  channelId String
  userId    String
  userName  String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  channel Channel @relation(fields: [channelId], references: [id])

  @@map(name: "channel_messages")
}
